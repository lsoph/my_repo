name: Update package version

on: issue_comment

jobs:
  resolve_pr_refs:
    # This job only runs for pull request comments
    name: Resolve PR branches
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      target_branch: ${{ steps.refs.outputs.base_ref }}
      source_branch: ${{ steps.refs.outputs.head_ref }}
    steps:
      - uses: eficode/resolve-pr-refs@main
        id: refs
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  is_update_requested:
    name: Is version update requested
    needs: resolve_pr_refs
    if: contains(github.event.comment.body, '$ update')
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.is_requested.outputs.result }}
      version: ${{ steps.is_requested.outputs.version }}
    steps:
      - name: Version update requested
        id: is_requested
        run: |
          result=1
          version=0

          shopt -s nocasematch

          case "${{ github.event.comment.body }}" in
            "$ update major") version=major;;
            "$ update minor") version=minor;;
            "$ update patch") version=patch;;
            \$[[:space:]]update[[:space:]][0-9]\.[0-9]\.[0-9])
              version=$(echo "${{ github.event.comment.body }}" | sed 's/\$[[:space:]]update[[:space:]]//g');;
            * ) result=0;;
          esac

          echo "::set-output name=result::$result"
          echo "::set-output name=version::$(echo $version)"

          if [ $result==1 ]; then
            echo Version update was requested
            echo Version: $version
            echo Source branch: ${{ needs.resolve_pr_refs.outputs.source_branch }}
            echo Target branch: ${{ needs.resolve_pr_refs.outputs.target_branch }}
          else
            echo Version update was not requested
          fi

      - name: view output
        run: |
          echo steps.is_requested.outputs.version = ${{ steps.is_requested.outputs.version }}
          echo steps.is_requested.outputs.result = ${{ steps.is_requested.outputs.result }}

  is_organization_member:
    name: Is th2 member
    needs: is_update_requested
    if: ${{ needs.is_update_requested.outputs.result }}
    runs-on: ubuntu-latest
    outputs:
      is_member: ${{ steps.membership_check.outputs.result }}
    steps:
      - name: Membership check
        id: membership_check
        uses: jamessingleton/is-organization-member@main
        with:
          organization: th2-net
          username: ${{ github.event.issue.user.login }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Is member?
        run: |
          result=${{ steps.membership_check.outputs.result }}
          if [ $result == false ]; then
            user=${{ github.event.comment.user.login }}
            echo Either ${user} is not part of the th2-net organization
            echo or ${user} has its Organization Visibility set to Private at
            echo https://github.com/orgs/th2-net/people?query=${user}
            echo
            echo Ensure you change your Organization Visibility to Public and
            echo trigger the test again.
            exit 1
          elif [ $result == true ]; then
            user=${{ github.event.comment.user.login }}
            echo '::set-output name=user_login::$user'
            echo ${user} is part of the th2-net organization
          fi

  update_package_version:
    name: Update package version
    needs: [resolve_pr_refs, is_update_requested, is_organization_member]
    if: ${{ needs.is_organization_member.outputs.is_member }}
    runs-on: ubuntu-latest
    outputs:
      old_version_source: ${{ steps.old_source.outputs.package_version }}
      new_version_source: ${{ steps.new_source.outputs.package_version }}
      versions_check_result: ${{ steps.check_versions.outputs.result }}
      versions_check_warning_message: ${{ steps.check_versions.outputs.warning_message }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Git configuration
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git pull

      - name: Checkout on target branch
        id: target
        run: |
          git checkout ${{ needs.resolve_pr_refs.outputs.target_branch }}
          echo Target branch package version: $target_version
          echo "::set-output name=package_version::$(echo $(poetry version -s))"

      - name: Checkout on source branch
        id: old_source
        run: |
          git checkout ${{ needs.resolve_pr_refs.outputs.source_branch }}
          echo "::set-output name=package_version::$(echo $(poetry version -s))"

      - name: Update version
        id: new_source
        run: |
          shopt -s nocasematch
          echo Is member: ${{ needs.is_organization_member.outputs.is_member }}
          echo Version: ${{ needs.is_update_requested.outputs.version }}
          case '${{ needs.is_update_requested.outputs.version }}' in
            "major") poetry version major;;
            "minor") poetry version minor;;
            "patch") poetry version patch;;
            [0-9]\.[0-9]\.[0-9]) poetry version ${{ needs.is_update_requested.outputs.version }};;
          esac

          echo "::set-output name=package_version::$(echo $(poetry version -s))"

      - name: Check versions in target and source branches
        id: check_versions
        run: |
          result=true
          warning_message=false

          if [[ ${{ steps.new_source.outputs.package_version }} < ${{ steps.target.outputs.package_version }} ||
              ${{ steps.new_source.outputs.package_version }} == ${{ steps.target.outputs.package_version }} ||
              ${{ steps.new_source.outputs.package_version }} != ${{ steps.old_source.outputs.package_version }} ]]
            then warning_message="Package version was updated from ${{ steps.old_source.outputs.package_version }} to
              ${{ steps.new_source.outputs.package_version }}, but package version in target branch
              is ${{ steps.target.outputs.package_version }}."
          elif [[ ${{ steps.new_source.outputs.package_version }} == ${{ steps.old_source.outputs.package_version }} ]]
            then result=false
            warning_message="Package version is already ${{ steps.new_source.outputs.package_version }}.
              Nothing to be committed"
          fi

          echo "::set-output name=result::$result"
          echo "::set-output name=warning_message::$warning_message"
          echo $warning_message

      - name: Commit & Push changes
        run: |
          if ${{ steps.check_versions.outputs.result }}; then
            git add pyproject.toml
            git commit -m "[TH2-0] Auto commit. Update package version"
            git push
          else
            echo Cannot make Commit \& Push: ${{ steps.check_versions.outputs.warning_message }}
          fi

  comment_reply_if_not_member:
    name: Not member comment
    needs: is_organization_member
    if: ${{ !needs.is_organization_member.outputs.is_member }}
    runs-on: ubuntu-latest
    steps:
      - name: Create comment body
        id: comment_body
        run: |
          user=${{ github.event.comment.user.login }}
          body="You can update the version only if you are th2 member.
            If you are member, check whether your Organization Visibility set to Public at
            https://github.com/orgs/th2-net/people?query=$user."

          echo Comment body: $body
          echo Is member: ${{ needs.is_organization_member.outputs.is_member }}
          echo "::set-output name=body::$(echo $body)"

      - uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ steps.comment_body.outputs.body }}'
            })

  comment_reply_if_member:
    name: Update version comment
    needs: update_package_version
    runs-on: ubuntu-latest
    steps:
      - name: Create comment body
        id: comment_body
        run: |
          old_version=${{ needs.update_package_version.outputs.old_version_source }}
          new_version=${{ needs.update_package_version.outputs.new_version_source }}

          echo Warning message: ${{ needs.update_package_version.outputs.warning_message }}

          if ${{ !needs.update_package_version.outputs.warning_message }}; then
            body="Package version was updated from $old_version to $new_version successfully."
          else
            body="${{ needs.update_package_version.outputs.warning_message }}"
          fi

          echo Comment body: $body
          echo "::set-output name=body::$(echo $body)"

      - uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ steps.comment_body.outputs.body }}'
            })
